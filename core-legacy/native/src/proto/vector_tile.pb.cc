// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vector_tile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OsmAnd {
namespace VectorTile {

namespace {

const ::google::protobuf::Descriptor* Tile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tile_Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tile_Layer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Tile_GeomType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vector_5ftile_2eproto() {
  protobuf_AddDesc_vector_5ftile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vector_tile.proto");
  GOOGLE_CHECK(file != NULL);
  Tile_descriptor_ = file->message_type(0);
  static const int Tile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, layers_),
  };
  Tile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_descriptor_,
      Tile::default_instance_,
      Tile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile));
  Tile_Value_descriptor_ = Tile_descriptor_->nested_type(0);
  static const int Tile_Value_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, uint_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, sint_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, bool_value_),
  };
  Tile_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_Value_descriptor_,
      Tile_Value::default_instance_,
      Tile_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Value, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile_Value));
  Tile_Feature_descriptor_ = Tile_descriptor_->nested_type(1);
  static const int Tile_Feature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, geometry_),
  };
  Tile_Feature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_Feature_descriptor_,
      Tile_Feature::default_instance_,
      Tile_Feature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Feature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile_Feature));
  Tile_Layer_descriptor_ = Tile_descriptor_->nested_type(2);
  static const int Tile_Layer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, extent_),
  };
  Tile_Layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tile_Layer_descriptor_,
      Tile_Layer::default_instance_,
      Tile_Layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tile_Layer, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tile_Layer));
  Tile_GeomType_descriptor_ = Tile_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vector_5ftile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_descriptor_, &Tile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_Value_descriptor_, &Tile_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_Feature_descriptor_, &Tile_Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tile_Layer_descriptor_, &Tile_Layer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vector_5ftile_2eproto() {
  delete Tile::default_instance_;
  delete Tile_reflection_;
  delete Tile_Value::default_instance_;
  delete Tile_Value_reflection_;
  delete Tile_Feature::default_instance_;
  delete Tile_Feature_reflection_;
  delete Tile_Layer::default_instance_;
  delete Tile_Layer_reflection_;
}

void protobuf_AddDesc_vector_5ftile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021vector_tile.proto\022\021OsmAnd.VectorTile\"\330"
    "\004\n\004Tile\022-\n\006layers\030\003 \003(\0132\035.OsmAnd.VectorT"
    "ile.Tile.Layer\032\241\001\n\005Value\022\024\n\014string_value"
    "\030\001 \001(\t\022\023\n\013float_value\030\002 \001(\002\022\024\n\014double_va"
    "lue\030\003 \001(\001\022\021\n\tint_value\030\004 \001(\003\022\022\n\nuint_val"
    "ue\030\005 \001(\004\022\022\n\nsint_value\030\006 \001(\022\022\022\n\nbool_val"
    "ue\030\007 \001(\010*\010\010\010\020\200\200\200\200\002\032y\n\007Feature\022\r\n\002id\030\001 \001("
    "\004:\0010\022\020\n\004tags\030\002 \003(\rB\002\020\001\0227\n\004type\030\003 \001(\0162 .O"
    "smAnd.VectorTile.Tile.GeomType:\007UNKNOWN\022"
    "\024\n\010geometry\030\004 \003(\rB\002\020\001\032\271\001\n\005Layer\022\022\n\007versi"
    "on\030\017 \002(\r:\0011\022\014\n\004name\030\001 \002(\t\0221\n\010features\030\002 "
    "\003(\0132\037.OsmAnd.VectorTile.Tile.Feature\022\014\n\004"
    "keys\030\003 \003(\t\022-\n\006values\030\004 \003(\0132\035.OsmAnd.Vect"
    "orTile.Tile.Value\022\024\n\006extent\030\005 \001(\r:\0044096*"
    "\010\010\020\020\200\200\200\200\002\"\?\n\010GeomType\022\013\n\007UNKNOWN\020\000\022\t\n\005PO"
    "INT\020\001\022\016\n\nLINESTRING\020\002\022\013\n\007POLYGON\020\003*\005\010\020\020\200"
    "@B\037\n\021net.osmand.binaryB\nVectorTile", 674);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vector_tile.proto", &protobuf_RegisterTypes);
  Tile::default_instance_ = new Tile();
  Tile_Value::default_instance_ = new Tile_Value();
  Tile_Feature::default_instance_ = new Tile_Feature();
  Tile_Layer::default_instance_ = new Tile_Layer();
  Tile::default_instance_->InitAsDefaultInstance();
  Tile_Value::default_instance_->InitAsDefaultInstance();
  Tile_Feature::default_instance_->InitAsDefaultInstance();
  Tile_Layer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vector_5ftile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vector_5ftile_2eproto {
  StaticDescriptorInitializer_vector_5ftile_2eproto() {
    protobuf_AddDesc_vector_5ftile_2eproto();
  }
} static_descriptor_initializer_vector_5ftile_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Tile_GeomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_GeomType_descriptor_;
}
bool Tile_GeomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Tile_GeomType Tile::UNKNOWN;
const Tile_GeomType Tile::POINT;
const Tile_GeomType Tile::LINESTRING;
const Tile_GeomType Tile::POLYGON;
const Tile_GeomType Tile::GeomType_MIN;
const Tile_GeomType Tile::GeomType_MAX;
const int Tile::GeomType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Tile_Value::kStringValueFieldNumber;
const int Tile_Value::kFloatValueFieldNumber;
const int Tile_Value::kDoubleValueFieldNumber;
const int Tile_Value::kIntValueFieldNumber;
const int Tile_Value::kUintValueFieldNumber;
const int Tile_Value::kSintValueFieldNumber;
const int Tile_Value::kBoolValueFieldNumber;
#endif  // !_MSC_VER

Tile_Value::Tile_Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tile_Value::InitAsDefaultInstance() {
}

Tile_Value::Tile_Value(const Tile_Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tile_Value::SharedCtor() {
  _cached_size_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  float_value_ = 0;
  double_value_ = 0;
  int_value_ = GOOGLE_LONGLONG(0);
  uint_value_ = GOOGLE_ULONGLONG(0);
  sint_value_ = GOOGLE_LONGLONG(0);
  bool_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile_Value::~Tile_Value() {
  SharedDtor();
}

void Tile_Value::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void Tile_Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_Value_descriptor_;
}

const Tile_Value& Tile_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile_Value* Tile_Value::default_instance_ = NULL;

Tile_Value* Tile_Value::New() const {
  return new Tile_Value;
}

void Tile_Value::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    float_value_ = 0;
    double_value_ = 0;
    int_value_ = GOOGLE_LONGLONG(0);
    uint_value_ = GOOGLE_ULONGLONG(0);
    sint_value_ = GOOGLE_LONGLONG(0);
    bool_value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_float_value;
        break;
      }

      // optional float float_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_double_value;
        break;
      }

      // optional double double_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_int_value;
        break;
      }

      // optional int64 int_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uint_value;
        break;
      }

      // optional uint64 uint_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint_value_)));
          set_has_uint_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sint_value;
        break;
      }

      // optional sint64 sint_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sint_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint_value_)));
          set_has_sint_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bool_value;
        break;
      }

      // optional bool bool_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((64u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tile_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_value(), output);
  }

  // optional float float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_value(), output);
  }

  // optional double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }

  // optional int64 int_value = 4;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_value(), output);
  }

  // optional uint64 uint_value = 5;
  if (has_uint_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uint_value(), output);
  }

  // optional sint64 sint_value = 6;
  if (has_sint_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->sint_value(), output);
  }

  // optional bool bool_value = 7;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bool_value(), output);
  }

  // Extension range [8, 536870912)
  _extensions_.SerializeWithCachedSizes(
      8, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tile_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_value(), target);
  }

  // optional float float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_value(), target);
  }

  // optional double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }

  // optional int64 int_value = 4;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int_value(), target);
  }

  // optional uint64 uint_value = 5;
  if (has_uint_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uint_value(), target);
  }

  // optional sint64 sint_value = 6;
  if (has_sint_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->sint_value(), target);
  }

  // optional bool bool_value = 7;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bool_value(), target);
  }

  // Extension range [8, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      8, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tile_Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string string_value = 1;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional float float_value = 2;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional double double_value = 3;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional int64 int_value = 4;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
    }

    // optional uint64 uint_value = 5;
    if (has_uint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint_value());
    }

    // optional sint64 sint_value = 6;
    if (has_sint_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint_value());
    }

    // optional bool bool_value = 7;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile_Value::MergeFrom(const Tile_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_uint_value()) {
      set_uint_value(from.uint_value());
    }
    if (from.has_sint_value()) {
      set_sint_value(from.sint_value());
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile_Value::CopyFrom(const Tile_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_Value::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Tile_Value::Swap(Tile_Value* other) {
  if (other != this) {
    std::swap(string_value_, other->string_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(uint_value_, other->uint_value_);
    std::swap(sint_value_, other->sint_value_);
    std::swap(bool_value_, other->bool_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Tile_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_Value_descriptor_;
  metadata.reflection = Tile_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Tile_Feature::kIdFieldNumber;
const int Tile_Feature::kTagsFieldNumber;
const int Tile_Feature::kTypeFieldNumber;
const int Tile_Feature::kGeometryFieldNumber;
#endif  // !_MSC_VER

Tile_Feature::Tile_Feature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tile_Feature::InitAsDefaultInstance() {
}

Tile_Feature::Tile_Feature(const Tile_Feature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tile_Feature::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile_Feature::~Tile_Feature() {
  SharedDtor();
}

void Tile_Feature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tile_Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile_Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_Feature_descriptor_;
}

const Tile_Feature& Tile_Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile_Feature* Tile_Feature::default_instance_ = NULL;

Tile_Feature* Tile_Feature::New() const {
  return new Tile_Feature;
}

void Tile_Feature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  tags_.Clear();
  geometry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile_Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated uint32 tags = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_tags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .OsmAnd.VectorTile.Tile.GeomType type = 3 [default = UNKNOWN];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OsmAnd::VectorTile::Tile_GeomType_IsValid(value)) {
            set_type(static_cast< ::OsmAnd::VectorTile::Tile_GeomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_geometry;
        break;
      }

      // repeated uint32 geometry = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_geometry())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_geometry())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tile_Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated uint32 tags = 2 [packed = true];
  if (this->tags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tags_cached_byte_size_);
  }
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tags(i), output);
  }

  // optional .OsmAnd.VectorTile.Tile.GeomType type = 3 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint32 geometry = 4 [packed = true];
  if (this->geometry_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_geometry_cached_byte_size_);
  }
  for (int i = 0; i < this->geometry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->geometry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tile_Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated uint32 tags = 2 [packed = true];
  if (this->tags_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tags_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tags(i), target);
  }

  // optional .OsmAnd.VectorTile.Tile.GeomType type = 3 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated uint32 geometry = 4 [packed = true];
  if (this->geometry_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _geometry_cached_byte_size_, target);
  }
  for (int i = 0; i < this->geometry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->geometry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tile_Feature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .OsmAnd.VectorTile.Tile.GeomType type = 3 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 tags = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tags(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tags_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 geometry = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->geometry_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->geometry(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _geometry_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile_Feature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile_Feature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile_Feature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile_Feature::MergeFrom(const Tile_Feature& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  geometry_.MergeFrom(from.geometry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile_Feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile_Feature::CopyFrom(const Tile_Feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_Feature::IsInitialized() const {

  return true;
}

void Tile_Feature::Swap(Tile_Feature* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    tags_.Swap(&other->tags_);
    std::swap(type_, other->type_);
    geometry_.Swap(&other->geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tile_Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_Feature_descriptor_;
  metadata.reflection = Tile_Feature_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Tile_Layer::kVersionFieldNumber;
const int Tile_Layer::kNameFieldNumber;
const int Tile_Layer::kFeaturesFieldNumber;
const int Tile_Layer::kKeysFieldNumber;
const int Tile_Layer::kValuesFieldNumber;
const int Tile_Layer::kExtentFieldNumber;
#endif  // !_MSC_VER

Tile_Layer::Tile_Layer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tile_Layer::InitAsDefaultInstance() {
}

Tile_Layer::Tile_Layer(const Tile_Layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tile_Layer::SharedCtor() {
  _cached_size_ = 0;
  version_ = 1u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extent_ = 4096u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile_Layer::~Tile_Layer() {
  SharedDtor();
}

void Tile_Layer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Tile_Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile_Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_Layer_descriptor_;
}

const Tile_Layer& Tile_Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile_Layer* Tile_Layer::default_instance_ = NULL;

Tile_Layer* Tile_Layer::New() const {
  return new Tile_Layer;
}

void Tile_Layer::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 1u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    extent_ = 4096u;
  }
  features_.Clear();
  keys_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile_Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_features;
        break;
      }

      // repeated .OsmAnd.VectorTile.Tile.Feature features = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_features;
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated string keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // repeated .OsmAnd.VectorTile.Tile.Value values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_values;
        if (input->ExpectTag(40)) goto parse_extent;
        break;
      }

      // optional uint32 extent = 5 [default = 4096];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extent_)));
          set_has_extent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_version;
        break;
      }

      // required uint32 version = 15 [default = 1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((128u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tile_Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .OsmAnd.VectorTile.Tile.Feature features = 2;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->features(i), output);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->keys(i).data(), this->keys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keys(i), output);
  }

  // repeated .OsmAnd.VectorTile.Tile.Value values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->values(i), output);
  }

  // optional uint32 extent = 5 [default = 4096];
  if (has_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extent(), output);
  }

  // required uint32 version = 15 [default = 1];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->version(), output);
  }

  // Extension range [16, 536870912)
  _extensions_.SerializeWithCachedSizes(
      16, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tile_Layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .OsmAnd.VectorTile.Tile.Feature features = 2;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->features(i), target);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keys(i), target);
  }

  // repeated .OsmAnd.VectorTile.Tile.Value values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->values(i), target);
  }

  // optional uint32 extent = 5 [default = 4096];
  if (has_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extent(), target);
  }

  // required uint32 version = 15 [default = 1];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->version(), target);
  }

  // Extension range [16, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      16, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tile_Layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 15 [default = 1];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 extent = 5 [default = 4096];
    if (has_extent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extent());
    }

  }
  // repeated .OsmAnd.VectorTile.Tile.Feature features = 2;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  // repeated string keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated .OsmAnd.VectorTile.Tile.Value values = 4;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile_Layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile_Layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile_Layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile_Layer::MergeFrom(const Tile_Layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_extent()) {
      set_extent(from.extent());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile_Layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile_Layer::CopyFrom(const Tile_Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile_Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Tile_Layer::Swap(Tile_Layer* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    features_.Swap(&other->features_);
    keys_.Swap(&other->keys_);
    values_.Swap(&other->values_);
    std::swap(extent_, other->extent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Tile_Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_Layer_descriptor_;
  metadata.reflection = Tile_Layer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Tile::kLayersFieldNumber;
#endif  // !_MSC_VER

Tile::Tile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tile::InitAsDefaultInstance() {
}

Tile::Tile(const Tile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tile::~Tile() {
  SharedDtor();
}

void Tile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tile_descriptor_;
}

const Tile& Tile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vector_5ftile_2eproto();
  return *default_instance_;
}

Tile* Tile::default_instance_ = NULL;

Tile* Tile::New() const {
  return new Tile;
}

void Tile::Clear() {
  _extensions_.Clear();
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OsmAnd.VectorTile.Tile.Layer layers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((128u <= tag && tag < 65536u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OsmAnd.VectorTile.Tile.Layer layers = 3;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layers(i), output);
  }

  // Extension range [16, 8192)
  _extensions_.SerializeWithCachedSizes(
      16, 8192, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OsmAnd.VectorTile.Tile.Layer layers = 3;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layers(i), target);
  }

  // Extension range [16, 8192)
  target = _extensions_.SerializeWithCachedSizesToArray(
      16, 8192, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tile::ByteSize() const {
  int total_size = 0;

  // repeated .OsmAnd.VectorTile.Tile.Layer layers = 3;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {

  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Tile::Swap(Tile* other) {
  if (other != this) {
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tile_descriptor_;
  metadata.reflection = Tile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VectorTile
}  // namespace OsmAnd

// @@protoc_insertion_point(global_scope)
