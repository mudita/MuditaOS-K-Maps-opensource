// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#ifndef PROTOBUF_vector_5ftile_2eproto__INCLUDED
#define PROTOBUF_vector_5ftile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace OsmAnd {
namespace VectorTile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vector_5ftile_2eproto();
void protobuf_AssignDesc_vector_5ftile_2eproto();
void protobuf_ShutdownFile_vector_5ftile_2eproto();

class Tile;
class Tile_Value;
class Tile_Feature;
class Tile_Layer;

enum Tile_GeomType {
  Tile_GeomType_UNKNOWN = 0,
  Tile_GeomType_POINT = 1,
  Tile_GeomType_LINESTRING = 2,
  Tile_GeomType_POLYGON = 3
};
bool Tile_GeomType_IsValid(int value);
const Tile_GeomType Tile_GeomType_GeomType_MIN = Tile_GeomType_UNKNOWN;
const Tile_GeomType Tile_GeomType_GeomType_MAX = Tile_GeomType_POLYGON;
const int Tile_GeomType_GeomType_ARRAYSIZE = Tile_GeomType_GeomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tile_GeomType_descriptor();
inline const ::std::string& Tile_GeomType_Name(Tile_GeomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tile_GeomType_descriptor(), value);
}
inline bool Tile_GeomType_Parse(
    const ::std::string& name, Tile_GeomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tile_GeomType>(
    Tile_GeomType_descriptor(), name, value);
}
// ===================================================================

class Tile_Value : public ::google::protobuf::Message {
 public:
  Tile_Value();
  virtual ~Tile_Value();

  Tile_Value(const Tile_Value& from);

  inline Tile_Value& operator=(const Tile_Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile_Value& default_instance();

  void Swap(Tile_Value* other);

  // implements Message ----------------------------------------------

  Tile_Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile_Value& from);
  void MergeFrom(const Tile_Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string_value = 1;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 1;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  inline void set_allocated_string_value(::std::string* string_value);

  // optional float float_value = 2;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 2;
  inline float float_value() const;
  inline void set_float_value(float value);

  // optional double double_value = 3;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  inline double double_value() const;
  inline void set_double_value(double value);

  // optional int64 int_value = 4;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 4;
  inline ::google::protobuf::int64 int_value() const;
  inline void set_int_value(::google::protobuf::int64 value);

  // optional uint64 uint_value = 5;
  inline bool has_uint_value() const;
  inline void clear_uint_value();
  static const int kUintValueFieldNumber = 5;
  inline ::google::protobuf::uint64 uint_value() const;
  inline void set_uint_value(::google::protobuf::uint64 value);

  // optional sint64 sint_value = 6;
  inline bool has_sint_value() const;
  inline void clear_sint_value();
  static const int kSintValueFieldNumber = 6;
  inline ::google::protobuf::int64 sint_value() const;
  inline void set_sint_value(::google::protobuf::int64 value);

  // optional bool bool_value = 7;
  inline bool has_bool_value() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 7;
  inline bool bool_value() const;
  inline void set_bool_value(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Tile_Value)
  // @@protoc_insertion_point(class_scope:OsmAnd.VectorTile.Tile.Value)
 private:
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_uint_value();
  inline void clear_has_uint_value();
  inline void set_has_sint_value();
  inline void clear_has_sint_value();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* string_value_;
  double double_value_;
  ::google::protobuf::int64 int_value_;
  float float_value_;
  bool bool_value_;
  ::google::protobuf::uint64 uint_value_;
  ::google::protobuf::int64 sint_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_vector_5ftile_2eproto();
  friend void protobuf_AssignDesc_vector_5ftile_2eproto();
  friend void protobuf_ShutdownFile_vector_5ftile_2eproto();

  void InitAsDefaultInstance();
  static Tile_Value* default_instance_;
};
// -------------------------------------------------------------------

class Tile_Feature : public ::google::protobuf::Message {
 public:
  Tile_Feature();
  virtual ~Tile_Feature();

  Tile_Feature(const Tile_Feature& from);

  inline Tile_Feature& operator=(const Tile_Feature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile_Feature& default_instance();

  void Swap(Tile_Feature* other);

  // implements Message ----------------------------------------------

  Tile_Feature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile_Feature& from);
  void MergeFrom(const Tile_Feature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated uint32 tags = 2 [packed = true];
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 2;
  inline ::google::protobuf::uint32 tags(int index) const;
  inline void set_tags(int index, ::google::protobuf::uint32 value);
  inline void add_tags(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tags() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tags();

  // optional .OsmAnd.VectorTile.Tile.GeomType type = 3 [default = UNKNOWN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::OsmAnd::VectorTile::Tile_GeomType type() const;
  inline void set_type(::OsmAnd::VectorTile::Tile_GeomType value);

  // repeated uint32 geometry = 4 [packed = true];
  inline int geometry_size() const;
  inline void clear_geometry();
  static const int kGeometryFieldNumber = 4;
  inline ::google::protobuf::uint32 geometry(int index) const;
  inline void set_geometry(int index, ::google::protobuf::uint32 value);
  inline void add_geometry(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      geometry() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_geometry();

  // @@protoc_insertion_point(class_scope:OsmAnd.VectorTile.Tile.Feature)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tags_;
  mutable int _tags_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > geometry_;
  mutable int _geometry_cached_byte_size_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_vector_5ftile_2eproto();
  friend void protobuf_AssignDesc_vector_5ftile_2eproto();
  friend void protobuf_ShutdownFile_vector_5ftile_2eproto();

  void InitAsDefaultInstance();
  static Tile_Feature* default_instance_;
};
// -------------------------------------------------------------------

class Tile_Layer : public ::google::protobuf::Message {
 public:
  Tile_Layer();
  virtual ~Tile_Layer();

  Tile_Layer(const Tile_Layer& from);

  inline Tile_Layer& operator=(const Tile_Layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile_Layer& default_instance();

  void Swap(Tile_Layer* other);

  // implements Message ----------------------------------------------

  Tile_Layer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile_Layer& from);
  void MergeFrom(const Tile_Layer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 15 [default = 1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 15;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .OsmAnd.VectorTile.Tile.Feature features = 2;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 2;
  inline const ::OsmAnd::VectorTile::Tile_Feature& features(int index) const;
  inline ::OsmAnd::VectorTile::Tile_Feature* mutable_features(int index);
  inline ::OsmAnd::VectorTile::Tile_Feature* add_features();
  inline const ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Feature >&
      features() const;
  inline ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Feature >*
      mutable_features();

  // repeated string keys = 3;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 3;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated .OsmAnd.VectorTile.Tile.Value values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline const ::OsmAnd::VectorTile::Tile_Value& values(int index) const;
  inline ::OsmAnd::VectorTile::Tile_Value* mutable_values(int index);
  inline ::OsmAnd::VectorTile::Tile_Value* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Value >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Value >*
      mutable_values();

  // optional uint32 extent = 5 [default = 4096];
  inline bool has_extent() const;
  inline void clear_extent();
  static const int kExtentFieldNumber = 5;
  inline ::google::protobuf::uint32 extent() const;
  inline void set_extent(::google::protobuf::uint32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Tile_Layer)
  // @@protoc_insertion_point(class_scope:OsmAnd.VectorTile.Tile.Layer)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_extent();
  inline void clear_has_extent();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Feature > features_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 extent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Value > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_vector_5ftile_2eproto();
  friend void protobuf_AssignDesc_vector_5ftile_2eproto();
  friend void protobuf_ShutdownFile_vector_5ftile_2eproto();

  void InitAsDefaultInstance();
  static Tile_Layer* default_instance_;
};
// -------------------------------------------------------------------

class Tile : public ::google::protobuf::Message {
 public:
  Tile();
  virtual ~Tile();

  Tile(const Tile& from);

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile& default_instance();

  void Swap(Tile* other);

  // implements Message ----------------------------------------------

  Tile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Tile_Value Value;
  typedef Tile_Feature Feature;
  typedef Tile_Layer Layer;

  typedef Tile_GeomType GeomType;
  static const GeomType UNKNOWN = Tile_GeomType_UNKNOWN;
  static const GeomType POINT = Tile_GeomType_POINT;
  static const GeomType LINESTRING = Tile_GeomType_LINESTRING;
  static const GeomType POLYGON = Tile_GeomType_POLYGON;
  static inline bool GeomType_IsValid(int value) {
    return Tile_GeomType_IsValid(value);
  }
  static const GeomType GeomType_MIN =
    Tile_GeomType_GeomType_MIN;
  static const GeomType GeomType_MAX =
    Tile_GeomType_GeomType_MAX;
  static const int GeomType_ARRAYSIZE =
    Tile_GeomType_GeomType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GeomType_descriptor() {
    return Tile_GeomType_descriptor();
  }
  static inline const ::std::string& GeomType_Name(GeomType value) {
    return Tile_GeomType_Name(value);
  }
  static inline bool GeomType_Parse(const ::std::string& name,
      GeomType* value) {
    return Tile_GeomType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .OsmAnd.VectorTile.Tile.Layer layers = 3;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 3;
  inline const ::OsmAnd::VectorTile::Tile_Layer& layers(int index) const;
  inline ::OsmAnd::VectorTile::Tile_Layer* mutable_layers(int index);
  inline ::OsmAnd::VectorTile::Tile_Layer* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Layer >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Layer >*
      mutable_layers();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Tile)
  // @@protoc_insertion_point(class_scope:OsmAnd.VectorTile.Tile)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Layer > layers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_vector_5ftile_2eproto();
  friend void protobuf_AssignDesc_vector_5ftile_2eproto();
  friend void protobuf_ShutdownFile_vector_5ftile_2eproto();

  void InitAsDefaultInstance();
  static Tile* default_instance_;
};
// ===================================================================


// ===================================================================

// Tile_Value

// optional string string_value = 1;
inline bool Tile_Value::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tile_Value::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tile_Value::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tile_Value::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& Tile_Value::string_value() const {
  return *string_value_;
}
inline void Tile_Value::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void Tile_Value::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void Tile_Value::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tile_Value::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* Tile_Value::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tile_Value::set_allocated_string_value(::std::string* string_value) {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (string_value) {
    set_has_string_value();
    string_value_ = string_value;
  } else {
    clear_has_string_value();
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float float_value = 2;
inline bool Tile_Value::has_float_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tile_Value::set_has_float_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tile_Value::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tile_Value::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float Tile_Value::float_value() const {
  return float_value_;
}
inline void Tile_Value::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
}

// optional double double_value = 3;
inline bool Tile_Value::has_double_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tile_Value::set_has_double_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tile_Value::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tile_Value::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double Tile_Value::double_value() const {
  return double_value_;
}
inline void Tile_Value::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
}

// optional int64 int_value = 4;
inline bool Tile_Value::has_int_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Tile_Value::set_has_int_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Tile_Value::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Tile_Value::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
  clear_has_int_value();
}
inline ::google::protobuf::int64 Tile_Value::int_value() const {
  return int_value_;
}
inline void Tile_Value::set_int_value(::google::protobuf::int64 value) {
  set_has_int_value();
  int_value_ = value;
}

// optional uint64 uint_value = 5;
inline bool Tile_Value::has_uint_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Tile_Value::set_has_uint_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Tile_Value::clear_has_uint_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Tile_Value::clear_uint_value() {
  uint_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint_value();
}
inline ::google::protobuf::uint64 Tile_Value::uint_value() const {
  return uint_value_;
}
inline void Tile_Value::set_uint_value(::google::protobuf::uint64 value) {
  set_has_uint_value();
  uint_value_ = value;
}

// optional sint64 sint_value = 6;
inline bool Tile_Value::has_sint_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tile_Value::set_has_sint_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tile_Value::clear_has_sint_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tile_Value::clear_sint_value() {
  sint_value_ = GOOGLE_LONGLONG(0);
  clear_has_sint_value();
}
inline ::google::protobuf::int64 Tile_Value::sint_value() const {
  return sint_value_;
}
inline void Tile_Value::set_sint_value(::google::protobuf::int64 value) {
  set_has_sint_value();
  sint_value_ = value;
}

// optional bool bool_value = 7;
inline bool Tile_Value::has_bool_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Tile_Value::set_has_bool_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Tile_Value::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Tile_Value::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool Tile_Value::bool_value() const {
  return bool_value_;
}
inline void Tile_Value::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
}

// -------------------------------------------------------------------

// Tile_Feature

// optional uint64 id = 1 [default = 0];
inline bool Tile_Feature::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tile_Feature::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tile_Feature::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tile_Feature::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Tile_Feature::id() const {
  return id_;
}
inline void Tile_Feature::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated uint32 tags = 2 [packed = true];
inline int Tile_Feature::tags_size() const {
  return tags_.size();
}
inline void Tile_Feature::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint32 Tile_Feature::tags(int index) const {
  return tags_.Get(index);
}
inline void Tile_Feature::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
}
inline void Tile_Feature::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tile_Feature::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tile_Feature::mutable_tags() {
  return &tags_;
}

// optional .OsmAnd.VectorTile.Tile.GeomType type = 3 [default = UNKNOWN];
inline bool Tile_Feature::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tile_Feature::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tile_Feature::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tile_Feature::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::OsmAnd::VectorTile::Tile_GeomType Tile_Feature::type() const {
  return static_cast< ::OsmAnd::VectorTile::Tile_GeomType >(type_);
}
inline void Tile_Feature::set_type(::OsmAnd::VectorTile::Tile_GeomType value) {
  assert(::OsmAnd::VectorTile::Tile_GeomType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated uint32 geometry = 4 [packed = true];
inline int Tile_Feature::geometry_size() const {
  return geometry_.size();
}
inline void Tile_Feature::clear_geometry() {
  geometry_.Clear();
}
inline ::google::protobuf::uint32 Tile_Feature::geometry(int index) const {
  return geometry_.Get(index);
}
inline void Tile_Feature::set_geometry(int index, ::google::protobuf::uint32 value) {
  geometry_.Set(index, value);
}
inline void Tile_Feature::add_geometry(::google::protobuf::uint32 value) {
  geometry_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Tile_Feature::geometry() const {
  return geometry_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Tile_Feature::mutable_geometry() {
  return &geometry_;
}

// -------------------------------------------------------------------

// Tile_Layer

// required uint32 version = 15 [default = 1];
inline bool Tile_Layer::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tile_Layer::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tile_Layer::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tile_Layer::clear_version() {
  version_ = 1u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Tile_Layer::version() const {
  return version_;
}
inline void Tile_Layer::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required string name = 1;
inline bool Tile_Layer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tile_Layer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tile_Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tile_Layer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Tile_Layer::name() const {
  return *name_;
}
inline void Tile_Layer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Tile_Layer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Tile_Layer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tile_Layer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Tile_Layer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Tile_Layer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .OsmAnd.VectorTile.Tile.Feature features = 2;
inline int Tile_Layer::features_size() const {
  return features_.size();
}
inline void Tile_Layer::clear_features() {
  features_.Clear();
}
inline const ::OsmAnd::VectorTile::Tile_Feature& Tile_Layer::features(int index) const {
  return features_.Get(index);
}
inline ::OsmAnd::VectorTile::Tile_Feature* Tile_Layer::mutable_features(int index) {
  return features_.Mutable(index);
}
inline ::OsmAnd::VectorTile::Tile_Feature* Tile_Layer::add_features() {
  return features_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Feature >&
Tile_Layer::features() const {
  return features_;
}
inline ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Feature >*
Tile_Layer::mutable_features() {
  return &features_;
}

// repeated string keys = 3;
inline int Tile_Layer::keys_size() const {
  return keys_.size();
}
inline void Tile_Layer::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& Tile_Layer::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* Tile_Layer::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void Tile_Layer::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void Tile_Layer::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void Tile_Layer::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tile_Layer::add_keys() {
  return keys_.Add();
}
inline void Tile_Layer::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void Tile_Layer::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void Tile_Layer::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Tile_Layer::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Tile_Layer::mutable_keys() {
  return &keys_;
}

// repeated .OsmAnd.VectorTile.Tile.Value values = 4;
inline int Tile_Layer::values_size() const {
  return values_.size();
}
inline void Tile_Layer::clear_values() {
  values_.Clear();
}
inline const ::OsmAnd::VectorTile::Tile_Value& Tile_Layer::values(int index) const {
  return values_.Get(index);
}
inline ::OsmAnd::VectorTile::Tile_Value* Tile_Layer::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::OsmAnd::VectorTile::Tile_Value* Tile_Layer::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Value >&
Tile_Layer::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Value >*
Tile_Layer::mutable_values() {
  return &values_;
}

// optional uint32 extent = 5 [default = 4096];
inline bool Tile_Layer::has_extent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Tile_Layer::set_has_extent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Tile_Layer::clear_has_extent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Tile_Layer::clear_extent() {
  extent_ = 4096u;
  clear_has_extent();
}
inline ::google::protobuf::uint32 Tile_Layer::extent() const {
  return extent_;
}
inline void Tile_Layer::set_extent(::google::protobuf::uint32 value) {
  set_has_extent();
  extent_ = value;
}

// -------------------------------------------------------------------

// Tile

// repeated .OsmAnd.VectorTile.Tile.Layer layers = 3;
inline int Tile::layers_size() const {
  return layers_.size();
}
inline void Tile::clear_layers() {
  layers_.Clear();
}
inline const ::OsmAnd::VectorTile::Tile_Layer& Tile::layers(int index) const {
  return layers_.Get(index);
}
inline ::OsmAnd::VectorTile::Tile_Layer* Tile::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::OsmAnd::VectorTile::Tile_Layer* Tile::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Layer >&
Tile::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::OsmAnd::VectorTile::Tile_Layer >*
Tile::mutable_layers() {
  return &layers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VectorTile
}  // namespace OsmAnd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OsmAnd::VectorTile::Tile_GeomType>() {
  return ::OsmAnd::VectorTile::Tile_GeomType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vector_5ftile_2eproto__INCLUDED
